//initialize the stack pointer to 256
@256
D=A
@SP
M=D
//initialize the LCL segment to 300
@300
D=A
@LCL
M=D
//initialize the ARG segment to 400
@400
D=A
@ARG
M=D
//initialize the THIS segment to 500
@500
D=A
@THIS
M=D
//initialize the THAT segment to 600
@600
D=A
@THAT
M=D
//StackTest.vm
//push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=D-M
@EQ_TRUE0
D;JEQ
@SP
A=M
M=0
@SP
M=M+1
@END_EQ0
0;JMP
(EQ_TRUE0)
@SP
A=M
M=-1
@SP
M=M+1
(END_EQ0)
//push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=D-M
@EQ_TRUE1
D;JEQ
@SP
A=M
M=0
@SP
M=M+1
@END_EQ1
0;JMP
(EQ_TRUE1)
@SP
A=M
M=-1
@SP
M=M+1
(END_EQ1)
//push constant 16
@16
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 17
@17
D=A
@SP
A=M
M=D
@SP
M=M+1
//eq
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=D-M
@EQ_TRUE2
D;JEQ
@SP
A=M
M=0
@SP
M=M+1
@END_EQ2
0;JMP
(EQ_TRUE2)
@SP
A=M
M=-1
@SP
M=M+1
(END_EQ2)
//push constant 892
@892
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@LT_TRUE3
D;JLT
@SP
A=M
M=0
@SP
M=M+1
@END_LT3
0;JMP
(LT_TRUE3)
@SP
A=M
M=-1
@SP
M=M+1
(END_LT3)
//push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 892
@892
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@LT_TRUE4
D;JLT
@SP
A=M
M=0
@SP
M=M+1
@END_LT4
0;JMP
(LT_TRUE4)
@SP
A=M
M=-1
@SP
M=M+1
(END_LT4)
//push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 891
@891
D=A
@SP
A=M
M=D
@SP
M=M+1
//lt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@LT_TRUE5
D;JLT
@SP
A=M
M=0
@SP
M=M+1
@END_LT5
0;JMP
(LT_TRUE5)
@SP
A=M
M=-1
@SP
M=M+1
(END_LT5)
//push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@GT_TRUE6
D;JGT
@SP
A=M
M=0
@SP
M=M+1
@END_GT6
0;JMP
(GT_TRUE6)
@SP
A=M
M=-1
@SP
M=M+1
(END_GT)6
//push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 32767
@32767
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@GT_TRUE7
D;JGT
@SP
A=M
M=0
@SP
M=M+1
@END_GT7
0;JMP
(GT_TRUE7)
@SP
A=M
M=-1
@SP
M=M+1
(END_GT)7
//push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 32766
@32766
D=A
@SP
A=M
M=D
@SP
M=M+1
//gt
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=M-D
@GT_TRUE8
D;JGT
@SP
A=M
M=0
@SP
M=M+1
@END_GT8
0;JMP
(GT_TRUE8)
@SP
A=M
M=-1
@SP
M=M+1
(END_GT)8
//push constant 57
@57
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 31
@31
D=A
@SP
A=M
M=D
@SP
M=M+1
//push constant 53
@53
D=A
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
D=D+M
@SP
A=M
M=D
@SP
M=M+1
//push constant 112
@112
D=A
@SP
A=M
M=D
@SP
M=M+1
//sub
@SP
M=M-1
A=M
D=M
@R13
M=D
@SP
M=M-1
A=M
D=M
@R13
D=D-M
@SP
A=M
M=D
@SP
M=M+1
//neg
@SP
M=M-1
A=M
M=-M
@SP
M=M+1
//and
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=D&M
@SP
A=M
M=D
@SP
M=M+1
//push constant 82
@82
D=A
@SP
A=M
M=D
@SP
M=M+1
//or
@SP
M=M-1
A=M
D=M
@SP
M=M-1
A=M
D=D|M
@SP
A=M
M=D
@SP
M=M+1
//not
@SP
M=M-1
A=M
M=!M
@SP
M=M+1
