/// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//The ALU
    ALU(x=outD , y=outAM , zx=instruction[11] , nx=instruction[10] , zy=instruction[9] , ny=instruction[8] , f=instruction[7] , no=instruction[6] , out=outM, out=outALU , zr=zr , ng=ng );
    //Registers
    ARegister(in=inA , load=loadA , out=outA, out[0..14]=addressM );
    DRegister(in=outALU , load=loadD , out=outD );
    PC(in=outA , load=loadPC , inc=true , reset=reset , out[0..14]=pc );
    //Muxes
    Mux16(a=outALU , b=instruction , sel=instA , out=inA );
    Mux16(a=outA , b=inM , sel=AMtoALU , out=outAM );
    //Decoder
        //instA logic
        Not(in=instruction[15] , out=instA );
        //loadD logic
        And(a=instruction[15] , b=instruction[4] , out=loadD );
        //loadA logic
        And(a=instC , b=instruction[5] , out=destA );
        Or(a=instA , b=destA , out=loadA );
        //inc logic (always true)
        //loadPC logic
            //if instruction is C
            Not(in=instA , out=instC );
            //JGT condition
                //positive output
                Or(a=zr , b=ng , out=state1 );
                Not(in=state1 , out=pos );
            And(a=instruction[0] , b=pos , out=JGT );
            //JEQ condition
            And(a=instruction[1] , b=zr , out=JEQ );
            //JLT condition
            And(a=instruction[2] , b=ng , out=JLT );
            //JGE condition
            Or(a=JGT , b=JEQ , out=JGE);
            //JNE condition
            Or(a=JGT , b=JLT , out=JNE );
            //JLE condition
            Or(a=JLT , b=JEQ , out=JLE );  
            //JMP condition
            Or(a=JLE, b=JGT, out=JMP);   
            //Nested Or structure
            Or(a=JGT , b=JEQ , out=J1 );  
            Or(a=JLT , b=J1 , out=J2 );  
            Or(a=JGE , b=J2 , out=J3 );  
            Or(a=JNE , b=J3 , out=J4 );  
            Or(a=JLE , b=J4 , out=J5 );  
            Or(a=JMP , b=J5 , out=J6 );  

            And(a=instC , b=J6 , out=loadPC);

            //instA logic on gate
            //AMtoALU logic (0 - load from A register, 1 - load from memory (M))
            And(a=instC , b=instruction[12] , out=AMtoALU);
            //loadM logic
            And(a=instC , b=instruction[3] , out=loadM, out=writeM);
}